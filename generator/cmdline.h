/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int events_arg;	/**< @brief Number of events (default='5').  */
  char * events_orig;	/**< @brief Number of events original value given at command line.  */
  const char *events_help; /**< @brief Number of events help description.  */
  int maxpars_arg;	/**< @brief maximum number of particles to intersect DirC (default='10').  */
  char * maxpars_orig;	/**< @brief maximum number of particles to intersect DirC original value given at command line.  */
  const char *maxpars_help; /**< @brief maximum number of particles to intersect DirC help description.  */
  int* nparticles_arg;	/**< @brief Takes in two arguments for the range in the number of particles emitted per event.  */
  char ** nparticles_orig;	/**< @brief Takes in two arguments for the range in the number of particles emitted per event original value given at command line.  */
  unsigned int nparticles_min; /**< @brief Takes in two arguments for the range in the number of particles emitted per event's minimum occurreces */
  unsigned int nparticles_max; /**< @brief Takes in two arguments for the range in the number of particles emitted per event's maximum occurreces */
  const char *nparticles_help; /**< @brief Takes in two arguments for the range in the number of particles emitted per event help description.  */
  double* etar_arg;	/**< @brief eta range.  */
  char ** etar_orig;	/**< @brief eta range original value given at command line.  */
  unsigned int etar_min; /**< @brief eta range's minimum occurreces */
  unsigned int etar_max; /**< @brief eta range's maximum occurreces */
  const char *etar_help; /**< @brief eta range help description.  */
  double* ptr_arg;	/**< @brief pt range (cannot be set with pr).  */
  char ** ptr_orig;	/**< @brief pt range (cannot be set with pr) original value given at command line.  */
  unsigned int ptr_min; /**< @brief pt range (cannot be set with pr)'s minimum occurreces */
  unsigned int ptr_max; /**< @brief pt range (cannot be set with pr)'s maximum occurreces */
  const char *ptr_help; /**< @brief pt range (cannot be set with pr) help description.  */
  double p_arg;	/**< @brief fixed momentum value (cannot be set with ptr).  */
  char * p_orig;	/**< @brief fixed momentum value (cannot be set with ptr) original value given at command line.  */
  const char *p_help; /**< @brief fixed momentum value (cannot be set with ptr) help description.  */
  double* phir_arg;	/**< @brief phi range.  */
  char ** phir_orig;	/**< @brief phi range original value given at command line.  */
  unsigned int phir_min; /**< @brief phi range's minimum occurreces */
  unsigned int phir_max; /**< @brief phi range's maximum occurreces */
  const char *phir_help; /**< @brief phi range help description.  */
  int char_arg;	/**< @brief charge (0=random, 1=positive, -1=negative) (default='0').  */
  char * char_orig;	/**< @brief charge (0=random, 1=positive, -1=negative) original value given at command line.  */
  const char *char_help; /**< @brief charge (0=random, 1=positive, -1=negative) help description.  */
  char ** types_arg;	/**< @brief particle types used.  */
  char ** types_orig;	/**< @brief particle types used original value given at command line.  */
  unsigned int types_min; /**< @brief particle types used's minimum occurreces */
  unsigned int types_max; /**< @brief particle types used's maximum occurreces */
  const char *types_help; /**< @brief particle types used help description.  */
  int seed_arg;	/**< @brief value for seed of random numbers (default='0').  */
  char * seed_orig;	/**< @brief value for seed of random numbers original value given at command line.  */
  const char *seed_help; /**< @brief value for seed of random numbers help description.  */
  char * output_arg;	/**< @brief root filename (relative or absolute path). By default written within directory as generator.root (default='particles.root').  */
  char * output_orig;	/**< @brief root filename (relative or absolute path). By default written within directory as generator.root original value given at command line.  */
  const char *output_help; /**< @brief root filename (relative or absolute path). By default written within directory as generator.root help description.  */
  const char *verbose_help; /**< @brief print data help description.  */
  const char *quiet_help; /**< @brief suppress all printing help description.  */
  char * dirc_properties_arg;	/**< @brief file with dirc properties (in this order): Length, Width, Height, Radial Distance, Magnetic Field (default='dirc').  */
  char * dirc_properties_orig;	/**< @brief file with dirc properties (in this order): Length, Width, Height, Radial Distance, Magnetic Field original value given at command line.  */
  const char *dirc_properties_help; /**< @brief file with dirc properties (in this order): Length, Width, Height, Radial Distance, Magnetic Field help description.  */
  char * custom_set_arg;	/**< @brief Takes a filename with parameters for the experiment including number of particles, range in eta, pt, and phi, and particle charge and type.  */
  char * custom_set_orig;	/**< @brief Takes a filename with parameters for the experiment including number of particles, range in eta, pt, and phi, and particle charge and type original value given at command line.  */
  const char *custom_set_help; /**< @brief Takes a filename with parameters for the experiment including number of particles, range in eta, pt, and phi, and particle charge and type help description.  */
  char * Directory_arg;	/**< @brief Sets the directory in which files will be saved (by default saves in current directory.  */
  char * Directory_orig;	/**< @brief Sets the directory in which files will be saved (by default saves in current directory original value given at command line.  */
  const char *Directory_help; /**< @brief Sets the directory in which files will be saved (by default saves in current directory help description.  */
  char * pt_func_arg;	/**< @brief The probability distribution that pt will follow from pt = 0 to pt = 10GeV.  */
  char * pt_func_orig;	/**< @brief The probability distribution that pt will follow from pt = 0 to pt = 10GeV original value given at command line.  */
  const char *pt_func_help; /**< @brief The probability distribution that pt will follow from pt = 0 to pt = 10GeV help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int events_given ;	/**< @brief Whether events was given.  */
  unsigned int maxpars_given ;	/**< @brief Whether maxpars was given.  */
  unsigned int nparticles_given ;	/**< @brief Whether nparticles was given.  */
  unsigned int etar_given ;	/**< @brief Whether etar was given.  */
  unsigned int ptr_given ;	/**< @brief Whether ptr was given.  */
  unsigned int p_given ;	/**< @brief Whether p was given.  */
  unsigned int phir_given ;	/**< @brief Whether phir was given.  */
  unsigned int char_given ;	/**< @brief Whether char was given.  */
  unsigned int types_given ;	/**< @brief Whether types was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int dirc_properties_given ;	/**< @brief Whether dirc-properties was given.  */
  unsigned int custom_set_given ;	/**< @brief Whether custom-set was given.  */
  unsigned int Directory_given ;	/**< @brief Whether Directory was given.  */
  unsigned int pt_func_given ;	/**< @brief Whether pt-func was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
