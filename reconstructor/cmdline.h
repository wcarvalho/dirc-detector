/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief path of particle-generated data.  */
  char * input_orig;	/**< @brief path of particle-generated data original value given at command line.  */
  const char *input_help; /**< @brief path of particle-generated data help description.  */
  char * Directory_arg;	/**< @brief Sets the directory in which files will be saved. With this option, with no argument the file is saved in directory of input file. Without this option, it is saved in the current directory (default='').  */
  char * Directory_orig;	/**< @brief Sets the directory in which files will be saved. With this option, with no argument the file is saved in directory of input file. Without this option, it is saved in the current directory original value given at command line.  */
  const char *Directory_help; /**< @brief Sets the directory in which files will be saved. With this option, with no argument the file is saved in directory of input file. Without this option, it is saved in the current directory help description.  */
  char * output_arg;	/**< @brief write file for reconstruction (default='particle_reconstruction.root').  */
  char * output_orig;	/**< @brief write file for reconstruction original value given at command line.  */
  const char *output_help; /**< @brief write file for reconstruction help description.  */
  const char *verbose_help; /**< @brief print data help description.  */
  const char *quiet_help; /**< @brief suppress all printing help description.  */
  int last_arg;	/**< @brief only reconstructs the last l particles.  */
  char * last_orig;	/**< @brief only reconstructs the last l particles original value given at command line.  */
  const char *last_help; /**< @brief only reconstructs the last l particles help description.  */
  double as_arg;	/**< @brief the known angular smearing (as) (default='.01').  */
  char * as_orig;	/**< @brief the known angular smearing (as) original value given at command line.  */
  const char *as_help; /**< @brief the known angular smearing (as) help description.  */
  double ts_arg;	/**< @brief the known temporal smearing (ts) (default='100').  */
  char * ts_orig;	/**< @brief the known temporal smearing (ts) original value given at command line.  */
  const char *ts_help; /**< @brief the known temporal smearing (ts) help description.  */
  double terr_arg;	/**< @brief an assumption on the error in the timing information (default='100').  */
  char * terr_orig;	/**< @brief an assumption on the error in the timing information original value given at command line.  */
  const char *terr_help; /**< @brief an assumption on the error in the timing information help description.  */
  int expected_photons_case_arg;	/**< @brief 
  \tcase 1: look-up table. 
  \tcase 2: riemann sum calculation. (default='1').  */
  char * expected_photons_case_orig;	/**< @brief 
  \tcase 1: look-up table. 
  \tcase 2: riemann sum calculation. original value given at command line.  */
  const char *expected_photons_case_help; /**< @brief 
  \tcase 1: look-up table. 
  \tcase 2: riemann sum calculation. help description.  */
  char * LookUpTable_arg;	/**< @brief file for look-up table (default='LookUpTable').  */
  char * LookUpTable_orig;	/**< @brief file for look-up table original value given at command line.  */
  const char *LookUpTable_help; /**< @brief file for look-up table help description.  */
  int* inc_arg;	/**< @brief 
  case 1: Use Theta Band. 
  case 2: Use Time Band.  */
  char ** inc_orig;	/**< @brief 
  case 1: Use Theta Band. 
  case 2: Use Time Band original value given at command line.  */
  unsigned int inc_min; /**< @brief 
  case 1: Use Theta Band. 
  case 2: Use Time Band's minimum occurreces */
  unsigned int inc_max; /**< @brief 
  case 1: Use Theta Band. 
  case 2: Use Time Band's maximum occurreces */
  const char *inc_help; /**< @brief 
  case 1: Use Theta Band. 
  case 2: Use Time Band help description.  */
  int band_search_case_arg;	/**< @brief 
  \tcase 1: Search 1D theta projection for gaussian peak. 
  \tcase 2: apply hough transform to 2D theta vs. phi histogram (default='1').  */
  char * band_search_case_orig;	/**< @brief 
  \tcase 1: Search 1D theta projection for gaussian peak. 
  \tcase 2: apply hough transform to 2D theta vs. phi histogram original value given at command line.  */
  const char *band_search_case_help; /**< @brief 
  \tcase 1: Search 1D theta projection for gaussian peak. 
  \tcase 2: apply hough transform to 2D theta vs. phi histogram help description.  */
  double band_search_width_arg;	/**< @brief width to use in theta band for each particle (default='.03').  */
  char * band_search_width_orig;	/**< @brief width to use in theta band for each particle original value given at command line.  */
  const char *band_search_width_help; /**< @brief width to use in theta band for each particle help description.  */
  double momentum_indexing_threshold_arg;	/**< @brief momentum threshold to determine whether an attemp will be made to index photons to a particular particle (default='.5').  */
  char * momentum_indexing_threshold_orig;	/**< @brief momentum threshold to determine whether an attemp will be made to index photons to a particular particle original value given at command line.  */
  const char *momentum_indexing_threshold_help; /**< @brief momentum threshold to determine whether an attemp will be made to index photons to a particular particle help description.  */
  double event_range_arg;	/**< @brief Event Range.  */
  char * event_range_orig;	/**< @brief Event Range original value given at command line.  */
  const char *event_range_help; /**< @brief Event Range help description.  */
  int fe_arg;	/**< @brief Debugging tool: focus event. This links to a boolean which checks if the current event in the analysis is the \"focus event\".  */
  char * fe_orig;	/**< @brief Debugging tool: focus event. This links to a boolean which checks if the current event in the analysis is the \"focus event\" original value given at command line.  */
  const char *fe_help; /**< @brief Debugging tool: focus event. This links to a boolean which checks if the current event in the analysis is the \"focus event\" help description.  */
  int fp_arg;	/**< @brief Debugging tool: focus particle. This links to a boolean which checks if the current particle in the analysis is the \"focus particle\".  */
  char * fp_orig;	/**< @brief Debugging tool: focus particle. This links to a boolean which checks if the current particle in the analysis is the \"focus particle\" original value given at command line.  */
  const char *fp_help; /**< @brief Debugging tool: focus particle. This links to a boolean which checks if the current particle in the analysis is the \"focus particle\" help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int Directory_given ;	/**< @brief Whether Directory was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int last_given ;	/**< @brief Whether last was given.  */
  unsigned int as_given ;	/**< @brief Whether as was given.  */
  unsigned int ts_given ;	/**< @brief Whether ts was given.  */
  unsigned int terr_given ;	/**< @brief Whether terr was given.  */
  unsigned int expected_photons_case_given ;	/**< @brief Whether expected-photons-case was given.  */
  unsigned int LookUpTable_given ;	/**< @brief Whether LookUpTable was given.  */
  unsigned int inc_given ;	/**< @brief Whether inc was given.  */
  unsigned int band_search_case_given ;	/**< @brief Whether band-search-case was given.  */
  unsigned int band_search_width_given ;	/**< @brief Whether band-search-width was given.  */
  unsigned int momentum_indexing_threshold_given ;	/**< @brief Whether momentum-indexing-threshold was given.  */
  unsigned int event_range_given ;	/**< @brief Whether event-range was given.  */
  unsigned int fe_given ;	/**< @brief Whether fe was given.  */
  unsigned int fp_given ;	/**< @brief Whether fp was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
